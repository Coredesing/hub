{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xb9c833649FA59c1896c5b490BD8963AAC04212E8",
    "txHash": "0xc6b87b2b99846c7f0bbb30832b1ac122531a5a55f49ff94d50bad5b76ec1cdbc",
    "deployTransaction": {
      "hash": "0xc6b87b2b99846c7f0bbb30832b1ac122531a5a55f49ff94d50bad5b76ec1cdbc",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x5D73Df30D4506A724a17a2158a3645f0C02501eF",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x04a817c800"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075da0"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 52,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x54c672421423dabc46641451157972d01fc985334da96847f771d4b01bd89e4a",
      "s": "0x5b32bdca004fe2641c980c1ab36ebf3ea4ad89e68da33bb9d5d6d1b578d2a4a6",
      "v": 147,
      "creates": "0xb9c833649FA59c1896c5b490BD8963AAC04212E8",
      "chainId": 56
    }
  },
  "proxies": [
    {
      "address": "0x925A8B4db018Ca2edec8Cd3D888586FF6433806F",
      "txHash": "0x6866dd8a7d01448c7c0ccfb082cb56b39be7538e117bdd142b4a700a2383e6ad",
      "kind": "transparent"
    },
    {
      "address": "0x3c413c27c58d95F20054563B217b2afaf6C3370E",
      "txHash": "0x04233272e6cabf12b18cdb0883c8f5796d3271b5eedfbf5c9bfbe3f11b6d9e25",
      "kind": "transparent"
    },
    {
      "address": "0xD7E79a96ab11a4eDa6DC4BB3eD30337a8e9BD70B",
      "txHash": "0x36dd48c30260256ef2e51df6714b24d40cf60111a75a1bbafc2736db4ec0fcbb",
      "kind": "transparent"
    },
    {
      "address": "0x03D97D4E3CD3EE6BD6449466E2fc485C73b7104c",
      "txHash": "0x7d58a4a98ebf0778cebb32929cb1eee97c649af695288e0bb83438103723068e",
      "kind": "transparent"
    },
    {
      "address": "0x670fCacC35fDbd4bF821036d995E3d85F39f751A",
      "txHash": "0xac8a707e0eafd19ecb8dfc07be152378b9ea68ed5243cc80845f4e0b6fc3412a",
      "kind": "transparent"
    },
    {
      "address": "0xF6805968E6412C3C514912815FE2f32336828399",
      "txHash": "0xbb2dc89aaadcd3c4361c36a24daf585ae5be16faa4f1dde352f94c95c4d1226b",
      "kind": "transparent"
    },
    {
      "address": "0x1f7D87fDDd5fF0D26E07E12c91723CD077b523cC",
      "txHash": "0xf668aa7736906112a51f98aa44eb08b49e0e518f933a587aeabe6912260e6723",
      "kind": "transparent"
    },
    {
      "address": "0x10B95B7B86F7128613277ACB1be89fbc4AFfdEAc",
      "txHash": "0x996655750e1f72a49ce89ff68f67afc5b51786ac2d47adc4894fa5789d0f81ad",
      "kind": "transparent"
    }
  ],
  "impls": {
    "ba6b284eceda48b828a03c02e0e480b003a5388f1c1fa958dc000ea051d9e3e3": {
      "address": "0xC15f4166581E17465cBcFb333F1c5D7a32108FfD",
      "txHash": "0x2a1f7d4dacc7718ecc267f10a760ae8d29c7273ff01747a224b115cfd5b2e62f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "NFTBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/NFTBox.sol:57"
          },
          {
            "contract": "NFTBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/NFTBox.sol:58"
          },
          {
            "contract": "NFTBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/NFTBox.sol:59"
          },
          {
            "contract": "NFTBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/NFTBox.sol:60"
          },
          {
            "contract": "NFTBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/NFTBox.sol:61"
          },
          {
            "contract": "NFTBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/NFTBox.sol:62"
          },
          {
            "contract": "NFTBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/NFTBox.sol:63"
          },
          {
            "contract": "NFTBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)10391_storage))",
            "src": "contracts/NFTBox.sol:64"
          },
          {
            "contract": "NFTBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/NFTBox.sol:65"
          },
          {
            "contract": "NFTBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)10373_storage)dyn_storage",
            "src": "contracts/NFTBox.sol:66"
          },
          {
            "contract": "NFTBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)10384_storage)dyn_storage",
            "src": "contracts/NFTBox.sol:67"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)10391_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct NFTBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)10391_storage)": {
            "label": "mapping(uint256 => struct NFTBox.SubBox)"
          },
          "t_struct(SubBox)10391_storage": {
            "label": "struct NFTBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)10373_storage)dyn_storage": {
            "label": "struct NFTBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)10373_storage": {
            "label": "struct NFTBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_uint256"
              },
              {
                "label": "startingBoxIndex",
                "type": "t_uint256"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_struct(Box)10384_storage)dyn_storage": {
            "label": "struct NFTBox.Box[]"
          },
          "t_struct(Box)10384_storage": {
            "label": "struct NFTBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "bf1f039ef9e7acb10fc9f4745e72099728cbb4af5bf56c5534220e453a3e1e87": {
      "address": "0xdA5c638DD00CDD1F275a31F5Af13712f9847A0e5",
      "txHash": "0x358f5d06a8bab1193142f963d083b415e71c16eb1b2387e023a9c4cfe02ca971",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:75"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:76"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:77"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:78"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8927_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:79"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:80"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:81"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8905_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:82"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8916_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:83"
          },
          {
            "contract": "GameFiBox",
            "label": "externalStakingContract",
            "type": "t_struct(ExternalStakingContract)8943_storage",
            "src": "contracts/nft-box/GameFiBox.sol:84"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8927_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8927_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8927_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8905_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8905_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8916_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8916_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ExternalStakingContract)8943_storage": {
            "label": "struct GameFiBox.ExternalStakingContract",
            "members": [
              {
                "label": "stakingAddress",
                "type": "t_address"
              },
              {
                "label": "discountPerMile",
                "type": "t_uint256"
              },
              {
                "label": "threshold",
                "type": "t_uint256"
              },
              {
                "label": "poolId",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "a0ee621919e188925f62245e5017eba335031ca613ca34ce68c66f781aaa2432": {
      "address": "0xb05378e6C338e9Dad1cE9C1354AA57542C555e1c",
      "txHash": "0x211c83d174d0aa54b468709b0bbb4b3cf7e843ba4e4db0767a0cf86d417f916c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:75"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:76"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:77"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:78"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:79"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:80"
          },
          {
            "contract": "GameFiBox",
            "label": "matWhitelist",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:81"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:82"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:83"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)9007_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:84"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:85"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:86"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8985_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:87"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8996_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:88"
          },
          {
            "contract": "GameFiBox",
            "label": "externalStakingContract",
            "type": "t_struct(ExternalStakingContract)9023_storage",
            "src": "contracts/nft-box/GameFiBox.sol:89"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)9007_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)9007_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)9007_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8985_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8985_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8996_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8996_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ExternalStakingContract)9023_storage": {
            "label": "struct GameFiBox.ExternalStakingContract",
            "members": [
              {
                "label": "stakingAddress",
                "type": "t_address"
              },
              {
                "label": "discountPerMile",
                "type": "t_uint256"
              },
              {
                "label": "threshold",
                "type": "t_uint256"
              },
              {
                "label": "poolId",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c7c3dcf9a8c0c28542aa6262d11fb89320a722032574a3237f6c995e51438fad": {
      "address": "0x55e8D5E4d61ac869E88fA15AE9064B6Bad12a462",
      "txHash": "0x9fc6dc13f1c0368c43606265a2dbf4c74536275961d763682bc493f1c3c0292f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:75"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:76"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:77"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:78"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:79"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:80"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:81"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:82"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)9013_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:83"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:84"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:85"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8991_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:86"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)9002_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:87"
          },
          {
            "contract": "GameFiBox",
            "label": "externalStakingContract",
            "type": "t_struct(ExternalStakingContract)9029_storage",
            "src": "contracts/nft-box/GameFiBox.sol:88"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)9013_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)9013_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)9013_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8991_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8991_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)9002_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)9002_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ExternalStakingContract)9029_storage": {
            "label": "struct GameFiBox.ExternalStakingContract",
            "members": [
              {
                "label": "stakingAddress",
                "type": "t_address"
              },
              {
                "label": "discountPerMile",
                "type": "t_uint256"
              },
              {
                "label": "threshold",
                "type": "t_uint256"
              },
              {
                "label": "poolId",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e7f5ae02cbd42075a3961a3a920d66c729c18dc533569829cbefa95abe550451": {
      "address": "0x4B813Ae1af8602aB345E7391654dcFf015Ec4992",
      "txHash": "0xbf929e14e72da3e28ab726338fe046d1bd7623307bef9fbdce7a15bb40fa8802",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "Marketplace",
            "label": "minBidIncrementPercentage",
            "type": "t_uint8",
            "src": "contracts/marketplace/Marketplace.sol:25"
          },
          {
            "contract": "Marketplace",
            "label": "feePercentage",
            "type": "t_uint8",
            "src": "contracts/marketplace/Marketplace.sol:28"
          },
          {
            "contract": "Marketplace",
            "label": "vault",
            "type": "t_address",
            "src": "contracts/marketplace/Marketplace.sol:31"
          },
          {
            "contract": "Marketplace",
            "label": "gamefi",
            "type": "t_address",
            "src": "contracts/marketplace/Marketplace.sol:34"
          },
          {
            "contract": "Marketplace",
            "label": "rankings",
            "type": "t_array(t_struct(Ranking)8620_storage)dyn_storage",
            "src": "contracts/marketplace/Marketplace.sol:36"
          },
          {
            "contract": "Marketplace",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)8416_storage)",
            "src": "contracts/marketplace/Marketplace.sol:39"
          },
          {
            "contract": "Marketplace",
            "label": "tokenBids",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/marketplace/Marketplace.sol:42"
          },
          {
            "contract": "Marketplace",
            "label": "_auctionIdTracker",
            "type": "t_struct(Counter)2544_storage",
            "src": "contracts/marketplace/Marketplace.sol:46"
          },
          {
            "contract": "Marketplace",
            "label": "allowedCurrency",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/marketplace/Marketplace.sol:50"
          },
          {
            "contract": "Marketplace",
            "label": "defaultCurrency",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/marketplace/Marketplace.sol:51"
          },
          {
            "contract": "Marketplace",
            "label": "tokensOnSale",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ListingToken)8428_storage))",
            "src": "contracts/marketplace/Marketplace.sol:54"
          },
          {
            "contract": "Marketplace",
            "label": "tokensWithOffers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)8421_storage)))",
            "src": "contracts/marketplace/Marketplace.sol:57"
          }
        ],
        "types": {
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Ranking)8620_storage)dyn_storage": {
            "label": "struct IStakingContract.Ranking[]"
          },
          "t_struct(Ranking)8620_storage": {
            "label": "struct IStakingContract.Ranking",
            "members": [
              {
                "label": "threshold",
                "type": "t_uint256"
              },
              {
                "label": "permile",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Auction)8416_storage)": {
            "label": "mapping(uint256 => struct IMarketplace.Auction)"
          },
          "t_struct(Auction)8416_storage": {
            "label": "struct IMarketplace.Auction",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "tokenOwner",
                "type": "t_address"
              },
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "auctionCurrency",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(Counter)2544_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(ListingToken)8428_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarketplace.ListingToken))"
          },
          "t_mapping(t_uint256,t_struct(ListingToken)8428_storage)": {
            "label": "mapping(uint256 => struct IMarketplace.ListingToken)"
          },
          "t_struct(ListingToken)8428_storage": {
            "label": "struct IMarketplace.ListingToken",
            "members": [
              {
                "label": "tokenOwner",
                "type": "t_address"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)8421_storage)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => struct IMarketplace.Offer)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)8421_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IMarketplace.Offer))"
          },
          "t_mapping(t_address,t_struct(Offer)8421_storage)": {
            "label": "mapping(address => struct IMarketplace.Offer)"
          },
          "t_struct(Offer)8421_storage": {
            "label": "struct IMarketplace.Offer",
            "members": [
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
