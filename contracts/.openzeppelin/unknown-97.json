{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xa7D1Ea4dB441EAAa9f83A82Cd4A91AD3e709F12f",
    "txHash": "0x055fc2fe2684346e3167427e7eb27e55c1472f48aeb3dc70bb4234b5fa9cd3a1",
    "deployTransaction": {
      "hash": "0x055fc2fe2684346e3167427e7eb27e55c1472f48aeb3dc70bb4234b5fa9cd3a1",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0xB7cEd2807441B5c5FA7a40a97467F73275EdF73f",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x04a817c800"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075da0"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 308,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x33142bd981236544807ef19d0390322d12e210769844b4eccd8fcce3d2802c7a",
      "s": "0x3aed91ceac5b7070a2968aea71db5b624ae1bcdd46c5433ba0dc4b79cffebc37",
      "v": 229,
      "creates": "0xa7D1Ea4dB441EAAa9f83A82Cd4A91AD3e709F12f",
      "chainId": 97
    }
  },
  "proxies": [
    {
      "address": "0xcBEF6964Af2c83132764C7c37D7fca384195d9A2",
      "txHash": "0x579968005ab112c05a0c69b54ea21875cb6ab77e316fa07f542017e2d726bae9",
      "kind": "transparent"
    },
    {
      "address": "0x5a6608158abcfE5E64bfD3a96240E3bdc7d2B3c1",
      "txHash": "0xff58ca92806fb58bdfc247c25d5e1ee1464bad1c71c547b193f5e6b681248681",
      "kind": "transparent"
    },
    {
      "address": "0x141F9b0c3579012C969ae0f9d726bC53A6D01870",
      "txHash": "0xbd868487b6e63ad4d4937975cabec8cf586ee83c99dbc0311fcd26a31e68f416",
      "kind": "transparent"
    },
    {
      "address": "0x2BBc8ffB57d5Dbfb3c6Cc0d7f3FE744f07612faf",
      "txHash": "0xc2a340b49e89950138924596bafd96b9700d172762075d5b4a3a9fdf06781460",
      "kind": "transparent"
    },
    {
      "address": "0xA888393c3f725E5CAbd56B96df2c57773c3D5119",
      "txHash": "0x618a494601b474931477aaa0c45a6a2d4933b7cce1c57c94370132d88e70adae",
      "kind": "transparent"
    },
    {
      "address": "0x2BBdDcaE198c1C73C557aF53f61AAEd25439e7EA",
      "txHash": "0x4933e35bd123dc162bb0617a847ace43e11d942046b8545744bd84e8270de626",
      "kind": "transparent"
    },
    {
      "address": "0xaC2DA722C705ea6a0b2cD17eAB2d37Ae643d4c7F",
      "txHash": "0xf84d93a200e56ee61ba207d1375921938fceaf1a5154bf5f415f5077cedd6be4",
      "kind": "transparent"
    },
    {
      "address": "0xfFD0e2bc4270FBe971Bc5cf9c7d973faC82B1867",
      "txHash": "0x7ba6b175a0431049fd4d9c5e501b8cea5b90065c7dc4fb6f6e54f78abb9e0bc2",
      "kind": "transparent"
    },
    {
      "address": "0xa95b2C891aE666D03Cc62024DeebA5251B6F89eb",
      "txHash": "0x8d4b3d1a04398956401878d62b4e0b02f65a84f58bed28938ef8567fd4a52ee2",
      "kind": "transparent"
    },
    {
      "address": "0x73D8CD94c4AD2ac7F19eE09F4b2E960Fba45FC68",
      "txHash": "0x3facd577ba2bdc297b1957657056c7f939176d67728618265a6352dd2f2db0e1",
      "kind": "transparent"
    },
    {
      "address": "0xd9fa4Aad401151738BBCa028F3dA53B14fdc95cF",
      "txHash": "0x1c0b52533dc3165d4495a6b94ffee3248b7c5220a77fe5b65605226ab4146e6f",
      "kind": "transparent"
    },
    {
      "address": "0x0bc363378Af7594d0D902A0488E7145e957c95cE",
      "txHash": "0xb0d1594b06b9e1607bb1fc7a4735d5124b2ac7a2046edbcb178225ec7ba8fa61",
      "kind": "transparent"
    },
    {
      "address": "0x6C16696c1069Ea1A21a16E9747b01Fdc882D3DD2",
      "txHash": "0xed0beb1a214332beb7a822329e12f5855cfa579d383b867cef8c074929f7e3e4",
      "kind": "transparent"
    },
    {
      "address": "0x4FAcD8CA2895Ef097b66b43250Bc05cC6C2b4ef9",
      "txHash": "0x6787b3589973be93fcf2a51314c913ad72f08c5a3e220b64d6d8b18c788edd0a",
      "kind": "transparent"
    },
    {
      "address": "0x49E1a88F0199C3cf4bb4882F579769995Aed843a",
      "txHash": "0x2fecf44f1d7c865ed4374cef3fc83f09d5d5124dcc693a7b03e33386b278da26",
      "kind": "transparent"
    },
    {
      "address": "0x8b944aE02E1A0Ad1b5a53B1fF4B9B0AAF5E3EF67",
      "txHash": "0x683bc1f1e75965d5f5a23fe6380d41443fec6f75d4afaefc78b07670cb45be45",
      "kind": "transparent"
    },
    {
      "address": "0xF7180A986dB99B9bD3B6387BEAb361CAd67C2206",
      "txHash": "0xbc2711082cd738744d5abdf550c6a9cde5c9cc32e7c20d83d30ac3917676fc8d",
      "kind": "transparent"
    }
  ],
  "impls": {
    "7f17ee30c6a4d2c54503ffe50fcf0743e639cc0b000d590ba748863ed7be5c85": {
      "address": "0x754D918aCfbe4D91460A17621Ab99C2bbB03Ab66",
      "txHash": "0x2e44b333f6761e15edc83241afc9fcddd3bd4427d793c62677ab99e8c43b4917",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/GameFiBoxASPO.sol:65"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/GameFiBoxASPO.sol:66"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/GameFiBoxASPO.sol:67"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/GameFiBoxASPO.sol:68"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/GameFiBoxASPO.sol:69"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/GameFiBoxASPO.sol:70"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/GameFiBoxASPO.sol:71"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/GameFiBoxASPO.sol:72"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8360_storage))",
            "src": "contracts/GameFiBoxASPO.sol:73"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/GameFiBoxASPO.sol:74"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/GameFiBoxASPO.sol:75"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "prices",
            "type": "t_mapping(t_address,t_struct(Rate)8372_storage)",
            "src": "contracts/GameFiBoxASPO.sol:76"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8342_storage)dyn_storage",
            "src": "contracts/GameFiBoxASPO.sol:77"
          },
          {
            "contract": "GameFiBoxASPO",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8353_storage)dyn_storage",
            "src": "contracts/GameFiBoxASPO.sol:78"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8360_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBoxASPO.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8360_storage)": {
            "label": "mapping(uint256 => struct GameFiBoxASPO.SubBox)"
          },
          "t_struct(SubBox)8360_storage": {
            "label": "struct GameFiBoxASPO.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(Rate)8372_storage)": {
            "label": "mapping(address => struct GameFiBoxASPO.Rate)"
          },
          "t_struct(Rate)8372_storage": {
            "label": "struct GameFiBoxASPO.Rate",
            "members": [
              {
                "label": "rate",
                "type": "t_uint256"
              },
              {
                "label": "decimal",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(SaleEvent)8342_storage)dyn_storage": {
            "label": "struct GameFiBoxASPO.SaleEvent[]"
          },
          "t_struct(SaleEvent)8342_storage": {
            "label": "struct GameFiBoxASPO.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_uint256"
              },
              {
                "label": "startingBoxIndex",
                "type": "t_uint256"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_struct(Box)8353_storage)dyn_storage": {
            "label": "struct GameFiBoxASPO.Box[]"
          },
          "t_struct(Box)8353_storage": {
            "label": "struct GameFiBoxASPO.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "1b780c3a37de90c3341a59108a3316fb8d7fa1419ab36afc0eaea82877307d1f": {
      "address": "0x94B9a4612101166e553905B7bfecDD647e0C9edD",
      "txHash": "0x423ba6b585c1323d51012f6ab5916fd7b4c54f8dea22c6e4575d759e0a520aaf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:62"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:63"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:64"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:65"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:66"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:67"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:68"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:69"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:70"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8701_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8712_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8723_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8723_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8701_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8701_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_uint256"
              },
              {
                "label": "startingBoxIndex",
                "type": "t_uint256"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_struct(Box)8712_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8712_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "b6e9f8080b7ab82d465d71a0fca21a4ead0275ae51edf47fe5c017577d8285a8": {
      "address": "0x9114Ce0921c2ff0fBD1b8a9578b94f06757238DE",
      "txHash": "0x92706e4aa2807b86941f85856a64ba1e475e3be3e0fea77be5b39faedd957820",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:62"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:63"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:64"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:65"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:66"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:67"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:68"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:69"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:70"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8701_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8712_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8723_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8723_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8701_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8701_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_uint256"
              },
              {
                "label": "startingBoxIndex",
                "type": "t_uint256"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_struct(Box)8712_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8712_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "ddfb2cd4bffbd663338bfc5306c1646507c685a41a61adeca638d98aefe77591": {
      "address": "0x238Fc8231D2229107594492699C631fDC74606BC",
      "txHash": "0x7ce96187960b24b89e5a515b8862dc6aa5edea07d2463932acbacf920f67a31a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:63"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:64"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:65"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:66"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:67"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:68"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:69"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:70"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8725_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8703_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8714_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:75"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8725_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8725_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8725_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8703_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8703_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_uint256"
              },
              {
                "label": "startingBoxIndex",
                "type": "t_uint256"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8714_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8714_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f46597e187f2789d1210784add7738ec41788c009fa6d50d507e42c8a4e2a6af": {
      "address": "0xEBf9402A6117C5B807f263A2D9Fe3F3a2D714133",
      "txHash": "0x3e58a97263cdbbe2d105677ef668c9ae74091c7932cd69bf3945de1e6c8372ab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:62"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:63"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:64"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:65"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:66"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:67"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:68"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:69"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:70"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8701_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8712_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8723_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8723_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8701_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8701_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8712_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8712_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "219e2ac5fbe33f8357b4d6def31ea48613b82e10cea30975a84f889844fbb9c9": {
      "address": "0x1f959e06e9360ca5dFFc150ed425ab04cBc4d0b2",
      "txHash": "0x1a8d3cd9cbcca1770c4a3a4b71e2af1a2a0c7df081328fee7e876dfb7e10ccd9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:62"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:63"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:64"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:65"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:66"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:67"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:68"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:69"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:70"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8701_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8712_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8723_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8723_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8701_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8701_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8712_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8712_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0e86ef325a2fab26cd8f2932aa5356df425abb78250ec21d2a0e2c9cad104bce": {
      "address": "0x7b46E4D6215CD87c90b9d8D02a1C995475c570B4",
      "txHash": "0x18a6e235546b462194e55e0703a55a7659f0a9794e63e05505fdce512ebfdc1c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:62"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:63"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:64"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:65"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:66"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:67"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:68"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:69"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:70"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8701_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8712_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8723_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8723_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8723_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8701_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8701_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useExternalRandom",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "useExternalMint",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8712_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8712_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "bf1f039ef9e7acb10fc9f4745e72099728cbb4af5bf56c5534220e453a3e1e87": {
      "address": "0x680564dCbd4cAFEe8F9775b63a9f8C8aabC3Cde8",
      "txHash": "0x62a6e67a113071feae8b69599f519b7a041d497181d049398f1b9290a5904e4c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:27"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:30"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:33"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "GameFiBox",
            "label": "uri",
            "type": "t_string_storage",
            "src": "contracts/nft-box/GameFiBox.sol:71"
          },
          {
            "contract": "GameFiBox",
            "label": "maxSupply",
            "type": "t_uint256",
            "src": "contracts/nft-box/GameFiBox.sol:72"
          },
          {
            "contract": "GameFiBox",
            "label": "fundWallet",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:73"
          },
          {
            "contract": "GameFiBox",
            "label": "signer",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:74"
          },
          {
            "contract": "GameFiBox",
            "label": "externalRandom",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:75"
          },
          {
            "contract": "GameFiBox",
            "label": "externalMinted",
            "type": "t_address",
            "src": "contracts/nft-box/GameFiBox.sol:76"
          },
          {
            "contract": "GameFiBox",
            "label": "allowTransfer",
            "type": "t_bool",
            "src": "contracts/nft-box/GameFiBox.sol:77"
          },
          {
            "contract": "GameFiBox",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "contracts/nft-box/GameFiBox.sol:78"
          },
          {
            "contract": "GameFiBox",
            "label": "subBoxes",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8729_storage))",
            "src": "contracts/nft-box/GameFiBox.sol:79"
          },
          {
            "contract": "GameFiBox",
            "label": "userBought",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/nft-box/GameFiBox.sol:80"
          },
          {
            "contract": "GameFiBox",
            "label": "superLimit",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft-box/GameFiBox.sol:81"
          },
          {
            "contract": "GameFiBox",
            "label": "saleEvents",
            "type": "t_array(t_struct(SaleEvent)8707_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:82"
          },
          {
            "contract": "GameFiBox",
            "label": "boxes",
            "type": "t_array(t_struct(Box)8718_storage)dyn_storage",
            "src": "contracts/nft-box/GameFiBox.sol:83"
          },
          {
            "contract": "GameFiBox",
            "label": "externalStakingContract",
            "type": "t_struct(ExternalStakingContract)8745_storage",
            "src": "contracts/nft-box/GameFiBox.sol:84"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SubBox)8729_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct GameFiBox.SubBox))"
          },
          "t_mapping(t_uint256,t_struct(SubBox)8729_storage)": {
            "label": "mapping(uint256 => struct GameFiBox.SubBox)"
          },
          "t_struct(SubBox)8729_storage": {
            "label": "struct GameFiBox.SubBox",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "totalSold",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "token",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(SaleEvent)8707_storage)dyn_storage": {
            "label": "struct GameFiBox.SaleEvent[]"
          },
          "t_struct(SaleEvent)8707_storage": {
            "label": "struct GameFiBox.SaleEvent",
            "members": [
              {
                "label": "currentSupply",
                "type": "t_uint256"
              },
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "maxPerBatch",
                "type": "t_uint256"
              },
              {
                "label": "NFT",
                "type": "t_address"
              },
              {
                "label": "startNFTId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              },
              {
                "label": "useSubEvent",
                "type": "t_bool"
              },
              {
                "label": "startingIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(Box)8718_storage)dyn_storage": {
            "label": "struct GameFiBox.Box[]"
          },
          "t_struct(Box)8718_storage": {
            "label": "struct GameFiBox.Box",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "nftId",
                "type": "t_uint256"
              },
              {
                "label": "eventId",
                "type": "t_uint256"
              },
              {
                "label": "subBoxId",
                "type": "t_uint256"
              },
              {
                "label": "revealed",
                "type": "t_bool"
              }
            ]
          },
          "t_struct(ExternalStakingContract)8745_storage": {
            "label": "struct GameFiBox.ExternalStakingContract",
            "members": [
              {
                "label": "stakingAddress",
                "type": "t_address"
              },
              {
                "label": "discountPerMile",
                "type": "t_uint256"
              },
              {
                "label": "threshold",
                "type": "t_uint256"
              },
              {
                "label": "poolId",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "19c712300cb1ec916e3dac8ea3446f64900aeb8cf45c7d45ff23f6503dd8fca9": {
      "address": "0xe3D82371409C9AdfaC47480716C4252a39beebF6",
      "txHash": "0xa991d1efa265cd1fcbe7522c121138ebffb02923286c98a10eb0ba6361899ba9",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:34"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "Marketplace",
            "label": "minBidIncrementPercentage",
            "type": "t_uint8",
            "src": "contracts/marketplace/Marketplace.sol:25"
          },
          {
            "contract": "Marketplace",
            "label": "feePercentage",
            "type": "t_uint8",
            "src": "contracts/marketplace/Marketplace.sol:28"
          },
          {
            "contract": "Marketplace",
            "label": "vault",
            "type": "t_address",
            "src": "contracts/marketplace/Marketplace.sol:31"
          },
          {
            "contract": "Marketplace",
            "label": "gamefi",
            "type": "t_address",
            "src": "contracts/marketplace/Marketplace.sol:34"
          },
          {
            "contract": "Marketplace",
            "label": "rankings",
            "type": "t_array(t_struct(Ranking)8503_storage)dyn_storage",
            "src": "contracts/marketplace/Marketplace.sol:36"
          },
          {
            "contract": "Marketplace",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)8299_storage)",
            "src": "contracts/marketplace/Marketplace.sol:39"
          },
          {
            "contract": "Marketplace",
            "label": "tokenBids",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "contracts/marketplace/Marketplace.sol:42"
          },
          {
            "contract": "Marketplace",
            "label": "_auctionIdTracker",
            "type": "t_struct(Counter)2544_storage",
            "src": "contracts/marketplace/Marketplace.sol:46"
          },
          {
            "contract": "Marketplace",
            "label": "allowedCurrency",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/marketplace/Marketplace.sol:50"
          },
          {
            "contract": "Marketplace",
            "label": "defaultCurrency",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/marketplace/Marketplace.sol:51"
          },
          {
            "contract": "Marketplace",
            "label": "tokensOnSale",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ListingToken)8311_storage))",
            "src": "contracts/marketplace/Marketplace.sol:54"
          },
          {
            "contract": "Marketplace",
            "label": "tokensWithOffers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)8304_storage)))",
            "src": "contracts/marketplace/Marketplace.sol:57"
          }
        ],
        "types": {
          "t_uint8": {
            "label": "uint8"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Ranking)8503_storage)dyn_storage": {
            "label": "struct IStakingContract.Ranking[]"
          },
          "t_struct(Ranking)8503_storage": {
            "label": "struct IStakingContract.Ranking",
            "members": [
              {
                "label": "threshold",
                "type": "t_uint256"
              },
              {
                "label": "permile",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Auction)8299_storage)": {
            "label": "mapping(uint256 => struct IMarketplace.Auction)"
          },
          "t_struct(Auction)8299_storage": {
            "label": "struct IMarketplace.Auction",
            "members": [
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "tokenContract",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "tokenOwner",
                "type": "t_address"
              },
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "auctionCurrency",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(Counter)2544_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(ListingToken)8311_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarketplace.ListingToken))"
          },
          "t_mapping(t_uint256,t_struct(ListingToken)8311_storage)": {
            "label": "mapping(uint256 => struct IMarketplace.ListingToken)"
          },
          "t_struct(ListingToken)8311_storage": {
            "label": "struct IMarketplace.ListingToken",
            "members": [
              {
                "label": "tokenOwner",
                "type": "t_address"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)8304_storage)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => struct IMarketplace.Offer)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)8304_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IMarketplace.Offer))"
          },
          "t_mapping(t_address,t_struct(Offer)8304_storage)": {
            "label": "mapping(address => struct IMarketplace.Offer)"
          },
          "t_struct(Offer)8304_storage": {
            "label": "struct IMarketplace.Offer",
            "members": [
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
