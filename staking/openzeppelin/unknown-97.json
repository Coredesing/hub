{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xaA2736AA602FC63eCB5Ca57e766ea3a309e09290",
    "txHash": "0x470e7a4d95270d794cd6c75e223fe7f58dad9c2df015e653dee01f95f4956755",
    "deployTransaction": {
      "hash": "0x470e7a4d95270d794cd6c75e223fe7f58dad9c2df015e653dee01f95f4956755",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x2EE206A3872b17f91071A003dA20c345bD0488d1",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x12a05f2000"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075da0"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 6,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x19876ba5622ff7e6b6e5321450e679cf18909c3779209f209b440e086be67165",
      "s": "0x1e681005617c67843c966a6cb922302ea3d4f3065167381068990078723d1de6",
      "v": 229,
      "creates": "0xaA2736AA602FC63eCB5Ca57e766ea3a309e09290",
      "chainId": 97
    }
  },
  "proxies": [
    {
      "address": "0xce9EeCDcE81706f2586DC579efE85F422b0b82B2",
      "txHash": "0x3242315256ab950f228e91303e02ec25ac6c4ef5ad88588b05f96f63a373edaf",
      "kind": "transparent"
    },
    {
      "address": "0x52cEb38aBba960D8c37d9BDdd76A888e8784eF26",
      "txHash": "0x03db6589736c6b761af6595459bc18dc6767ce5c5ffe807903f73174d93d02e2",
      "kind": "transparent"
    },
    {
      "address": "0x399d76120658f584CE342Fd0760e88a92bBc8B3C",
      "txHash": "0x05117dc48674ca136b40fc07c913814f2153508bf09be30a0ee595dc6dbe94ed",
      "kind": "transparent"
    },
    {
      "address": "0x377d7F217A5a5Dec886c8B4c56189a841E408Af7",
      "txHash": "0x61611abe07b63af48f1d08a950906a4d469c6d6a3aea346b3ae27841566decac",
      "kind": "transparent"
    },
    {
      "address": "0xDf566a122e58B2d1e5d9A24B2449bf99D20E3946",
      "txHash": "0xb961fb033b09a69b374d62dcb6c443af8aff928aa60aad529fa6151aea4a14db",
      "kind": "transparent"
    },
    {
      "address": "0xce78501C8Ef0EDECEBE140dc0fC87B53e489E34d",
      "txHash": "0x2b38ee9df25fb5763b1e9217b482bf14f21c801c7dd16d6ef6a63825a2c5d5ad",
      "kind": "transparent"
    },
    {
      "address": "0x48038aE145502b05057E80a50EFE573c13e8cc10",
      "txHash": "0x6b1b41aa0c93992acf03c5358f196f20cc0a1cbffffc8105ab0d25ab67b79b08",
      "kind": "transparent"
    },
    {
      "address": "0x511FdC020Eac2ea0cf24A4DDE37d2f1321E0111a",
      "txHash": "0x05a9c81979eaa3217bb2c03cfa27acf3ce3a9721ed82908e731713a9780d671e",
      "kind": "transparent"
    }
  ],
  "impls": {
    "492c66ec91e7684329603ce68455e2828d7e5f7354c5396df748ab8b90b5c9a7": {
      "address": "0xad02465b0cD415390BB91e52Eb7c29738c4eE90E",
      "txHash": "0xdfac47bf03a8215bf70c6b8ec503a0509a9fdedd63c749c18732565486316dcb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "LinearPool",
            "label": "linearAcceptedToken",
            "type": "t_contract(IERC20)1888",
            "src": "contracts/LinearPool.sol:27"
          },
          {
            "contract": "LinearPool",
            "label": "linearRewardDistributor",
            "type": "t_address",
            "src": "contracts/LinearPool.sol:29"
          },
          {
            "contract": "LinearPool",
            "label": "linearPoolInfo",
            "type": "t_array(t_struct(LinearPoolInfo)3966_storage)dyn_storage",
            "src": "contracts/LinearPool.sol:31"
          },
          {
            "contract": "LinearPool",
            "label": "linearStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)3975_storage))",
            "src": "contracts/LinearPool.sol:33"
          },
          {
            "contract": "LinearPool",
            "label": "linearPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)3980_storage))",
            "src": "contracts/LinearPool.sol:36"
          },
          {
            "contract": "LinearPool",
            "label": "linearFlexLockDuration",
            "type": "t_uint128",
            "src": "contracts/LinearPool.sol:39"
          },
          {
            "contract": "LinearPool",
            "label": "linearAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/LinearPool.sol:41"
          },
          {
            "contract": "AllocationPool",
            "label": "allocRewardToken",
            "type": "t_contract(IERC20)1888",
            "src": "contracts/AllocationPool.sol:50"
          },
          {
            "contract": "AllocationPool",
            "label": "allocRewardPerBlock",
            "type": "t_uint128",
            "src": "contracts/AllocationPool.sol:52"
          },
          {
            "contract": "AllocationPool",
            "label": "allocRewardDistributor",
            "type": "t_address",
            "src": "contracts/AllocationPool.sol:54"
          },
          {
            "contract": "AllocationPool",
            "label": "allocAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/AllocationPool.sol:56"
          },
          {
            "contract": "AllocationPool",
            "label": "allocPoolInfo",
            "type": "t_array(t_struct(AllocPoolInfo)2502_storage)dyn_storage",
            "src": "contracts/AllocationPool.sol:59"
          },
          {
            "contract": "AllocationPool",
            "label": "allocIsAdded",
            "type": "t_mapping(t_contract(IERC20)1888,t_bool)",
            "src": "contracts/AllocationPool.sol:61"
          },
          {
            "contract": "AllocationPool",
            "label": "allocUserInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocUserInfo)2488_storage))",
            "src": "contracts/AllocationPool.sol:63"
          },
          {
            "contract": "AllocationPool",
            "label": "totalAllocPoint",
            "type": "t_uint64",
            "src": "contracts/AllocationPool.sol:65"
          },
          {
            "contract": "AllocationPool",
            "label": "allocStartBlockNumber",
            "type": "t_uint64",
            "src": "contracts/AllocationPool.sol:67"
          },
          {
            "contract": "AllocationPool",
            "label": "allocEndBlockNumber",
            "type": "t_uint64",
            "src": "contracts/AllocationPool.sol:69"
          },
          {
            "contract": "AllocationPool",
            "label": "allocPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocPendingWithdrawal)2507_storage))",
            "src": "contracts/AllocationPool.sol:71"
          }
        ],
        "types": {
          "t_contract(IERC20)1888": {
            "label": "contract IERC20"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(AllocPoolInfo)2502_storage)dyn_storage": {
            "label": "struct AllocationPool.AllocPoolInfo[]"
          },
          "t_struct(AllocPoolInfo)2502_storage": {
            "label": "struct AllocationPool.AllocPoolInfo",
            "members": [
              {
                "label": "lpToken",
                "type": "t_contract(IERC20)1888"
              },
              {
                "label": "lpSupply",
                "type": "t_uint128"
              },
              {
                "label": "allocPoint",
                "type": "t_uint64"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint64"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_contract(IERC20)1888,t_bool)": {
            "label": "mapping(contract IERC20 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocUserInfo)2488_storage))": {
            "label": "mapping(uint256 => mapping(address => struct AllocationPool.AllocUserInfo))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(AllocUserInfo)2488_storage)": {
            "label": "mapping(address => struct AllocationPool.AllocUserInfo)"
          },
          "t_struct(AllocUserInfo)2488_storage": {
            "label": "struct AllocationPool.AllocUserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint128"
              },
              {
                "label": "pendingReward",
                "type": "t_uint128"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocPendingWithdrawal)2507_storage))": {
            "label": "mapping(uint256 => mapping(address => struct AllocationPool.AllocPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(AllocPendingWithdrawal)2507_storage)": {
            "label": "mapping(address => struct AllocationPool.AllocPendingWithdrawal)"
          },
          "t_struct(AllocPendingWithdrawal)2507_storage": {
            "label": "struct AllocationPool.AllocPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_struct(LinearPoolInfo)3966_storage)dyn_storage": {
            "label": "struct LinearPool.LinearPoolInfo[]"
          },
          "t_struct(LinearPoolInfo)3966_storage": {
            "label": "struct LinearPool.LinearPoolInfo",
            "members": [
              {
                "label": "cap",
                "type": "t_uint128"
              },
              {
                "label": "totalStaked",
                "type": "t_uint128"
              },
              {
                "label": "minInvestment",
                "type": "t_uint128"
              },
              {
                "label": "maxInvestment",
                "type": "t_uint128"
              },
              {
                "label": "APR",
                "type": "t_uint64"
              },
              {
                "label": "lockDuration",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              },
              {
                "label": "startJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "endJoinTime",
                "type": "t_uint128"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)3975_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearStakingData))"
          },
          "t_mapping(t_address,t_struct(LinearStakingData)3975_storage)": {
            "label": "mapping(address => struct LinearPool.LinearStakingData)"
          },
          "t_struct(LinearStakingData)3975_storage": {
            "label": "struct LinearPool.LinearStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint128"
              },
              {
                "label": "joinTime",
                "type": "t_uint128"
              },
              {
                "label": "updatedTime",
                "type": "t_uint128"
              },
              {
                "label": "reward",
                "type": "t_uint128"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)3980_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(LinearPendingWithdrawal)3980_storage)": {
            "label": "mapping(address => struct LinearPool.LinearPendingWithdrawal)"
          },
          "t_struct(LinearPendingWithdrawal)3980_storage": {
            "label": "struct LinearPool.LinearPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "621ff2a2b32b0d5362f1535cdce460a827c5d1e68d99a26f59328b3da070380f": {
      "address": "0x8906D3257Faf00E165B8a667a3d0EF1df57170a1",
      "txHash": "0x2140c7680d3e18fe96b80297eb255d913378b26f4bedd791d5d0083465cc5441",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "LinearPool",
            "label": "linearAcceptedToken",
            "type": "t_contract(IERC20)1888",
            "src": "contracts/LinearPool.sol:27"
          },
          {
            "contract": "LinearPool",
            "label": "linearRewardDistributor",
            "type": "t_address",
            "src": "contracts/LinearPool.sol:29"
          },
          {
            "contract": "LinearPool",
            "label": "linearPoolInfo",
            "type": "t_array(t_struct(LinearPoolInfo)3966_storage)dyn_storage",
            "src": "contracts/LinearPool.sol:31"
          },
          {
            "contract": "LinearPool",
            "label": "linearStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)3975_storage))",
            "src": "contracts/LinearPool.sol:33"
          },
          {
            "contract": "LinearPool",
            "label": "linearPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)3980_storage))",
            "src": "contracts/LinearPool.sol:36"
          },
          {
            "contract": "LinearPool",
            "label": "linearFlexLockDuration",
            "type": "t_uint128",
            "src": "contracts/LinearPool.sol:39"
          },
          {
            "contract": "LinearPool",
            "label": "linearAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/LinearPool.sol:41"
          },
          {
            "contract": "AllocationPool",
            "label": "allocRewardToken",
            "type": "t_contract(IERC20)1888",
            "src": "contracts/AllocationPool.sol:50"
          },
          {
            "contract": "AllocationPool",
            "label": "allocRewardPerBlock",
            "type": "t_uint128",
            "src": "contracts/AllocationPool.sol:52"
          },
          {
            "contract": "AllocationPool",
            "label": "allocRewardDistributor",
            "type": "t_address",
            "src": "contracts/AllocationPool.sol:54"
          },
          {
            "contract": "AllocationPool",
            "label": "allocAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/AllocationPool.sol:56"
          },
          {
            "contract": "AllocationPool",
            "label": "allocPoolInfo",
            "type": "t_array(t_struct(AllocPoolInfo)2502_storage)dyn_storage",
            "src": "contracts/AllocationPool.sol:59"
          },
          {
            "contract": "AllocationPool",
            "label": "allocIsAdded",
            "type": "t_mapping(t_contract(IERC20)1888,t_bool)",
            "src": "contracts/AllocationPool.sol:61"
          },
          {
            "contract": "AllocationPool",
            "label": "allocUserInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocUserInfo)2488_storage))",
            "src": "contracts/AllocationPool.sol:63"
          },
          {
            "contract": "AllocationPool",
            "label": "totalAllocPoint",
            "type": "t_uint64",
            "src": "contracts/AllocationPool.sol:65"
          },
          {
            "contract": "AllocationPool",
            "label": "allocStartBlockNumber",
            "type": "t_uint64",
            "src": "contracts/AllocationPool.sol:67"
          },
          {
            "contract": "AllocationPool",
            "label": "allocEndBlockNumber",
            "type": "t_uint64",
            "src": "contracts/AllocationPool.sol:69"
          },
          {
            "contract": "AllocationPool",
            "label": "allocPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocPendingWithdrawal)2507_storage))",
            "src": "contracts/AllocationPool.sol:71"
          }
        ],
        "types": {
          "t_contract(IERC20)1888": {
            "label": "contract IERC20"
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(AllocPoolInfo)2502_storage)dyn_storage": {
            "label": "struct AllocationPool.AllocPoolInfo[]"
          },
          "t_struct(AllocPoolInfo)2502_storage": {
            "label": "struct AllocationPool.AllocPoolInfo",
            "members": [
              {
                "label": "lpToken",
                "type": "t_contract(IERC20)1888"
              },
              {
                "label": "lpSupply",
                "type": "t_uint128"
              },
              {
                "label": "allocPoint",
                "type": "t_uint64"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint64"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_contract(IERC20)1888,t_bool)": {
            "label": "mapping(contract IERC20 => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocUserInfo)2488_storage))": {
            "label": "mapping(uint256 => mapping(address => struct AllocationPool.AllocUserInfo))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(AllocUserInfo)2488_storage)": {
            "label": "mapping(address => struct AllocationPool.AllocUserInfo)"
          },
          "t_struct(AllocUserInfo)2488_storage": {
            "label": "struct AllocationPool.AllocUserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint128"
              },
              {
                "label": "pendingReward",
                "type": "t_uint128"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(AllocPendingWithdrawal)2507_storage))": {
            "label": "mapping(uint256 => mapping(address => struct AllocationPool.AllocPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(AllocPendingWithdrawal)2507_storage)": {
            "label": "mapping(address => struct AllocationPool.AllocPendingWithdrawal)"
          },
          "t_struct(AllocPendingWithdrawal)2507_storage": {
            "label": "struct AllocationPool.AllocPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_struct(LinearPoolInfo)3966_storage)dyn_storage": {
            "label": "struct LinearPool.LinearPoolInfo[]"
          },
          "t_struct(LinearPoolInfo)3966_storage": {
            "label": "struct LinearPool.LinearPoolInfo",
            "members": [
              {
                "label": "cap",
                "type": "t_uint128"
              },
              {
                "label": "totalStaked",
                "type": "t_uint128"
              },
              {
                "label": "minInvestment",
                "type": "t_uint128"
              },
              {
                "label": "maxInvestment",
                "type": "t_uint128"
              },
              {
                "label": "APR",
                "type": "t_uint64"
              },
              {
                "label": "lockDuration",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              },
              {
                "label": "startJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "endJoinTime",
                "type": "t_uint128"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)3975_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearStakingData))"
          },
          "t_mapping(t_address,t_struct(LinearStakingData)3975_storage)": {
            "label": "mapping(address => struct LinearPool.LinearStakingData)"
          },
          "t_struct(LinearStakingData)3975_storage": {
            "label": "struct LinearPool.LinearStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint128"
              },
              {
                "label": "joinTime",
                "type": "t_uint128"
              },
              {
                "label": "updatedTime",
                "type": "t_uint128"
              },
              {
                "label": "reward",
                "type": "t_uint128"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)3980_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(LinearPendingWithdrawal)3980_storage)": {
            "label": "mapping(address => struct LinearPool.LinearPendingWithdrawal)"
          },
          "t_struct(LinearPendingWithdrawal)3980_storage": {
            "label": "struct LinearPool.LinearPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ade75816e70c1cb3f7303ded753e6e3db8dc8b902965995668e17b306036a81b": {
      "address": "0x188D51bF6ac8b31c3190b9bFd4899190e9B7515d",
      "txHash": "0x491280a2a334f3f58fa765514fda2e82515bdb58155824b07bc78e66564ea199",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "LinearPool",
            "label": "tierInfos",
            "type": "t_array(t_struct(TierInfo)3997_storage)dyn_storage",
            "src": "contracts/LinearPool.sol:27"
          },
          {
            "contract": "LinearPool",
            "label": "masters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/LinearPool.sol:30"
          },
          {
            "contract": "LinearPool",
            "label": "linearAcceptedToken",
            "type": "t_contract(IERC20)1888",
            "src": "contracts/LinearPool.sol:33"
          },
          {
            "contract": "LinearPool",
            "label": "linearRewardDistributor",
            "type": "t_address",
            "src": "contracts/LinearPool.sol:35"
          },
          {
            "contract": "LinearPool",
            "label": "linearPoolInfo",
            "type": "t_array(t_struct(LinearPoolInfo)3976_storage)dyn_storage",
            "src": "contracts/LinearPool.sol:37"
          },
          {
            "contract": "LinearPool",
            "label": "linearStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)3987_storage))",
            "src": "contracts/LinearPool.sol:39"
          },
          {
            "contract": "LinearPool",
            "label": "linearPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)3992_storage))",
            "src": "contracts/LinearPool.sol:42"
          },
          {
            "contract": "LinearPool",
            "label": "linearFlexLockDuration",
            "type": "t_uint128",
            "src": "contracts/LinearPool.sol:45"
          },
          {
            "contract": "LinearPool",
            "label": "linearAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/LinearPool.sol:47"
          }
        ],
        "types": {
          "t_array(t_struct(TierInfo)3997_storage)dyn_storage": {
            "label": "struct LinearPool.TierInfo[]"
          },
          "t_struct(TierInfo)3997_storage": {
            "label": "struct LinearPool.TierInfo",
            "members": [
              {
                "label": "threshold",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20)1888": {
            "label": "contract IERC20"
          },
          "t_array(t_struct(LinearPoolInfo)3976_storage)dyn_storage": {
            "label": "struct LinearPool.LinearPoolInfo[]"
          },
          "t_struct(LinearPoolInfo)3976_storage": {
            "label": "struct LinearPool.LinearPoolInfo",
            "members": [
              {
                "label": "cap",
                "type": "t_uint128"
              },
              {
                "label": "totalStaked",
                "type": "t_uint128"
              },
              {
                "label": "minInvestment",
                "type": "t_uint128"
              },
              {
                "label": "maxInvestment",
                "type": "t_uint128"
              },
              {
                "label": "APR",
                "type": "t_uint64"
              },
              {
                "label": "lockDuration",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              },
              {
                "label": "startJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "endJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "useLocalDelayPool",
                "type": "t_bool"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)3987_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearStakingData))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LinearStakingData)3987_storage)": {
            "label": "mapping(address => struct LinearPool.LinearStakingData)"
          },
          "t_struct(LinearStakingData)3987_storage": {
            "label": "struct LinearPool.LinearStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint128"
              },
              {
                "label": "joinTime",
                "type": "t_uint128"
              },
              {
                "label": "updatedTime",
                "type": "t_uint128"
              },
              {
                "label": "reward",
                "type": "t_uint128"
              },
              {
                "label": "exp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)3992_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(LinearPendingWithdrawal)3992_storage)": {
            "label": "mapping(address => struct LinearPool.LinearPendingWithdrawal)"
          },
          "t_struct(LinearPendingWithdrawal)3992_storage": {
            "label": "struct LinearPool.LinearPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8a256d86f2681949d4ad6db600d67870e3b6384a5dd4615fa6f1f84fa790e56f": {
      "address": "0x39400abdb6023d5F445B77748183396Ab06a03Ba",
      "txHash": "0xa6ccfd94b15d28f233658991e5bc3164ff8eb37be6264546f6fd8a37ec7dab09",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "LinearPoolV1",
            "label": "tierInfos",
            "type": "t_array(t_struct(TierInfo)6013_storage)dyn_storage",
            "src": "contracts/LinearPool-v1.sol:27"
          },
          {
            "contract": "LinearPoolV1",
            "label": "masters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/LinearPool-v1.sol:30"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearAcceptedToken",
            "type": "t_contract(IERC20)2372",
            "src": "contracts/LinearPool-v1.sol:33"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearRewardDistributor",
            "type": "t_address",
            "src": "contracts/LinearPool-v1.sol:35"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearPoolInfo",
            "type": "t_array(t_struct(LinearPoolInfo)5992_storage)dyn_storage",
            "src": "contracts/LinearPool-v1.sol:37"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)6003_storage))",
            "src": "contracts/LinearPool-v1.sol:39"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)6008_storage))",
            "src": "contracts/LinearPool-v1.sol:42"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearFlexLockDuration",
            "type": "t_uint128",
            "src": "contracts/LinearPool-v1.sol:45"
          },
          {
            "contract": "LinearPoolV1",
            "label": "linearAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/LinearPool-v1.sol:47"
          }
        ],
        "types": {
          "t_array(t_struct(TierInfo)6013_storage)dyn_storage": {
            "label": "struct LinearPoolV1.TierInfo[]"
          },
          "t_struct(TierInfo)6013_storage": {
            "label": "struct LinearPoolV1.TierInfo",
            "members": [
              {
                "label": "threshold",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20)2372": {
            "label": "contract IERC20"
          },
          "t_array(t_struct(LinearPoolInfo)5992_storage)dyn_storage": {
            "label": "struct LinearPoolV1.LinearPoolInfo[]"
          },
          "t_struct(LinearPoolInfo)5992_storage": {
            "label": "struct LinearPoolV1.LinearPoolInfo",
            "members": [
              {
                "label": "cap",
                "type": "t_uint128"
              },
              {
                "label": "totalStaked",
                "type": "t_uint128"
              },
              {
                "label": "minInvestment",
                "type": "t_uint128"
              },
              {
                "label": "maxInvestment",
                "type": "t_uint128"
              },
              {
                "label": "APR",
                "type": "t_uint64"
              },
              {
                "label": "lockDuration",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              },
              {
                "label": "startJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "endJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "useLocalDelayPool",
                "type": "t_bool"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)6003_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPoolV1.LinearStakingData))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LinearStakingData)6003_storage)": {
            "label": "mapping(address => struct LinearPoolV1.LinearStakingData)"
          },
          "t_struct(LinearStakingData)6003_storage": {
            "label": "struct LinearPoolV1.LinearStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint128"
              },
              {
                "label": "joinTime",
                "type": "t_uint128"
              },
              {
                "label": "updatedTime",
                "type": "t_uint128"
              },
              {
                "label": "reward",
                "type": "t_uint128"
              },
              {
                "label": "exp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)6008_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPoolV1.LinearPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(LinearPendingWithdrawal)6008_storage)": {
            "label": "mapping(address => struct LinearPoolV1.LinearPendingWithdrawal)"
          },
          "t_struct(LinearPendingWithdrawal)6008_storage": {
            "label": "struct LinearPoolV1.LinearPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "68d3b23192ede7f89677925be11177ef5b6034eaa55f219c0c730ebbef0ecd72": {
      "address": "0x73FC8A3a7859a10640A63e110962bEdB9f2A20B0",
      "txHash": "0xaa1f3c91c7b6140a31d6921e036310f8c6fe4d3d354da6383b4470f8993c6beb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "LinearPool",
            "label": "tierInfos",
            "type": "t_array(t_struct(TierInfo)7462_storage)dyn_storage",
            "src": "contracts/LinearPool.sol:27"
          },
          {
            "contract": "LinearPool",
            "label": "masters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/LinearPool.sol:30"
          },
          {
            "contract": "LinearPool",
            "label": "linearAcceptedToken",
            "type": "t_contract(IERC20)2372",
            "src": "contracts/LinearPool.sol:33"
          },
          {
            "contract": "LinearPool",
            "label": "linearRewardDistributor",
            "type": "t_address",
            "src": "contracts/LinearPool.sol:35"
          },
          {
            "contract": "LinearPool",
            "label": "linearPoolInfo",
            "type": "t_array(t_struct(LinearPoolInfo)7441_storage)dyn_storage",
            "src": "contracts/LinearPool.sol:37"
          },
          {
            "contract": "LinearPool",
            "label": "linearStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)7452_storage))",
            "src": "contracts/LinearPool.sol:39"
          },
          {
            "contract": "LinearPool",
            "label": "linearPendingWithdrawals",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)7457_storage))",
            "src": "contracts/LinearPool.sol:42"
          },
          {
            "contract": "LinearPool",
            "label": "linearFlexLockDuration",
            "type": "t_uint128",
            "src": "contracts/LinearPool.sol:45"
          },
          {
            "contract": "LinearPool",
            "label": "linearAllowEmergencyWithdraw",
            "type": "t_bool",
            "src": "contracts/LinearPool.sol:47"
          },
          {
            "contract": "LinearPool",
            "label": "linearAllowEmergencyTransfer",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/LinearPool.sol:50"
          }
        ],
        "types": {
          "t_array(t_struct(TierInfo)7462_storage)dyn_storage": {
            "label": "struct LinearPool.TierInfo[]"
          },
          "t_struct(TierInfo)7462_storage": {
            "label": "struct LinearPool.TierInfo",
            "members": [
              {
                "label": "threshold",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20)2372": {
            "label": "contract IERC20"
          },
          "t_array(t_struct(LinearPoolInfo)7441_storage)dyn_storage": {
            "label": "struct LinearPool.LinearPoolInfo[]"
          },
          "t_struct(LinearPoolInfo)7441_storage": {
            "label": "struct LinearPool.LinearPoolInfo",
            "members": [
              {
                "label": "cap",
                "type": "t_uint128"
              },
              {
                "label": "totalStaked",
                "type": "t_uint128"
              },
              {
                "label": "minInvestment",
                "type": "t_uint128"
              },
              {
                "label": "maxInvestment",
                "type": "t_uint128"
              },
              {
                "label": "APR",
                "type": "t_uint64"
              },
              {
                "label": "lockDuration",
                "type": "t_uint128"
              },
              {
                "label": "delayDuration",
                "type": "t_uint128"
              },
              {
                "label": "startJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "endJoinTime",
                "type": "t_uint128"
              },
              {
                "label": "useLocalDelayPool",
                "type": "t_bool"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearStakingData)7452_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearStakingData))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(LinearStakingData)7452_storage)": {
            "label": "mapping(address => struct LinearPool.LinearStakingData)"
          },
          "t_struct(LinearStakingData)7452_storage": {
            "label": "struct LinearPool.LinearStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint128"
              },
              {
                "label": "joinTime",
                "type": "t_uint128"
              },
              {
                "label": "updatedTime",
                "type": "t_uint128"
              },
              {
                "label": "reward",
                "type": "t_uint128"
              },
              {
                "label": "exp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(LinearPendingWithdrawal)7457_storage))": {
            "label": "mapping(uint256 => mapping(address => struct LinearPool.LinearPendingWithdrawal))"
          },
          "t_mapping(t_address,t_struct(LinearPendingWithdrawal)7457_storage)": {
            "label": "mapping(address => struct LinearPool.LinearPendingWithdrawal)"
          },
          "t_struct(LinearPendingWithdrawal)7457_storage": {
            "label": "struct LinearPool.LinearPendingWithdrawal",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128"
              },
              {
                "label": "applicableAt",
                "type": "t_uint128"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
